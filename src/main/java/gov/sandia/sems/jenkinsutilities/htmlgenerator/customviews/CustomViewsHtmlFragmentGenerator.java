/*******************************************************************************
* Watchr
* ------
* Copyright 2021 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
* Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains
* certain rights in this software.
******************************************************************************/
package gov.sandia.sems.jenkinsutilities.htmlgenerator.customviews;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import org.apache.commons.lang3.StringUtils;

import gov.sandia.sems.jenkins.semsjppplugin.CommonConstants;
import gov.sandia.sems.jenkinsutilities.htmlgenerator.AbstractHtmlGenerator;
import gov.sandia.sems.jenkinsutilities.htmlgenerator.DivModel;
import gov.sandia.sems.jenkinsutilities.htmlgenerator.HtmlConstants;
import gov.sandia.sems.jenkinsutilities.htmlgenerator.HtmlFragmentGenerator;

/**
 * A collection of static methods responsible for generating fragments of HTML
 * based on page state.
 * 
 * @author Elliott Ridgway
 */
public class CustomViewsHtmlFragmentGenerator {

    ////////////
    // PUBLIC //
    ////////////

    /**
     * Builds the menu bar area (used for configuring graph display settings when not adding/editing/deleting
     * a specific View).
     * 
     * @param context The {@link CustomViewConfigContext} model for the current Jenkins Job.
     * @param measurables The set of measurables to display in the menu bar area.
     * @return The generated HTML as a String.
     */
    public static String buildMenuBar(CustomViewConfigContext context, String[] measurables) {
        StringBuilder sb = new StringBuilder();
        sb.append("<div class=\"pane-frame\">\n");
        sb.append("<table id=\"graphSettings\" class=\"pane\" style=\"margin-top:0; border-top:none\">\n");
        sb.append("<tr style=\"border-top:none; white-space: normal\">\n");
        sb.append("<td>\n");
        sb.append("<h2 style=\"padding-top:20px;padding-left:20px;\">Performance Report Display Configuration</h2>");

        sb.append("<form method=\"post\" autocomplete=\"off\" name=\"");
        sb.append(HtmlConstants.GRAPH_OPTIONS_FORM);
        sb.append("\" action=\"");
        sb.append("?").append(HtmlConstants.PARAM_CUSTOM_VIEW_MODE);
        sb.append("=").append(HtmlConstants.CUSTOM_VIEW_MODE_UPDATE_DISPLAY);
        sb.append("\">");
        sb.append("<table width=\"100%\">");

        sb.append(AbstractHtmlGenerator.appendCrumbInformation());

        sb.append(HtmlFragmentGenerator.buildOptionCombo(
            HtmlConstants.PARAM_MEASURABLE, "Display Measurable:  ",
            measurables, context.getGraphSelectedMeasurable(), 200)
        );
        sb.append(HtmlFragmentGenerator.buildTextField(
            HtmlConstants.PARAM_TIME_SCALE, "Range to Display: ",
            Integer.toString(context.getGraphSelectedTimeScale()), 200)
        );
        sb.append(HtmlFragmentGenerator.buildTextField(
            HtmlConstants.PARAM_GRAPH_WIDTH, "Graph Width: ",
            Integer.toString(context.getGraphWidth()), 200)
        );
        sb.append(HtmlFragmentGenerator.buildTextField(
            HtmlConstants.PARAM_GRAPH_HEIGHT, "Graph Height: ",
            Integer.toString(context.getGraphHeight()), 200)
        );
        sb.append(HtmlFragmentGenerator.buildTextField(
            HtmlConstants.PARAM_GRAPHS_PER_ROW, "Graphs Per Row: ",
            Integer.toString(context.getGraphsPerRow()), 200)
        );
        sb.append(HtmlFragmentGenerator.buildTextField(
            HtmlConstants.PARAM_ROUND_TO, "Number of Displayed Decimal Places: ",
            Integer.toString(context.getRoundTo()), 200)
        );
        sb.append(HtmlConstants.SPACING);

        sb.append("<tr>");
        sb.append("<td colspan=\"4\">");
        sb.append("<input name=\"Submit\" type=\"submit\" value=\"Submit\" class=\"submit-button primary\" />");
        sb.append("</td>");
        sb.append("</tr>");

        sb.append("</table>");
        sb.append("</form>");
        sb.append("</td>");
        sb.append("</tr>");
        sb.append("</table>");
        sb.append("</div>");

        return sb.toString();
    }

    /**
     * Build the HTML for the custom view editor.
     * 
     * @param dataJson A {@link JsonObject} data payload (generated by a {@link CustomViewConfigContext} object)
     * used for populating the main form of this HTML.
     * @return The generated HTML as a String.
     */
    public static String buildCustomViewEditor(JsonObject dataJson) {
        String name = dataJson.get(HtmlConstants.PARAM_CUSTOM_VIEW_FIELD_NAME).getAsString();
        String searchTerm = dataJson.get(HtmlConstants.PARAM_CUSTOM_VIEW_FIELD_SEARCH_TERM).getAsString();
        String searchType = dataJson.get(HtmlConstants.PARAM_CUSTOM_VIEW_SEARCH_STYLE).getAsString();
        CustomViewMode mode = CustomViewMode.getEnumVersion(dataJson.get(HtmlConstants.PARAM_CUSTOM_VIEW_MODE).getAsString());

        JsonArray availableJsonArray = new JsonArray();
        JsonArray selectedJsonArray = new JsonArray();
        if(dataJson.has(CommonConstants.AVAILABLE_DATASETS)) {
            availableJsonArray = (JsonArray) dataJson.get(CommonConstants.AVAILABLE_DATASETS);
        }
        if(dataJson.has(CommonConstants.SELECTED_DATASETS)) {
            selectedJsonArray = (JsonArray) dataJson.get(CommonConstants.SELECTED_DATASETS);
        }

        String rejectReason = "";
        if(dataJson.has(HtmlConstants.PARAM_CUSTOM_VIEW_REJECT_REASON)) {
            rejectReason = dataJson.get(HtmlConstants.PARAM_CUSTOM_VIEW_REJECT_REASON).getAsString();
        }

        StringBuilder sb = new StringBuilder();
        sb.append("<div class=\"pane-frame\">\n");
        sb.append("<table id=\"graphSettings\" class=\"pane\" style=\"margin-top:0; border-top:none\">\n");
        sb.append("<tr style=\"border-top:none; white-space: normal\">\n");
        sb.append("<td>\n");
        sb.append("<h2 style=\"padding-top:20px;padding-left:20px;\">");
        sb.append(mode == CustomViewMode.ADD ? "Add New Custom View" : "Edit Custom View");
        sb.append("</h2>");

        if(StringUtils.isNotBlank(rejectReason)) {
            sb.append("<div class=\"error\">");
            if(rejectReason.equals(HtmlConstants.CUSTOM_VIEW_REJECT_REASON_BAD_NAME)) {
                sb.append("The view name ").append(name).append(" can only contain alphanumeric characters and spaces.");
            } else if(rejectReason.equals(HtmlConstants.CUSTOM_VIEW_REJECT_REASON_DUP_NAME)) {
                sb.append("The view name ").append(name).append(" already exists.");
            } else if(rejectReason.equals(HtmlConstants.CUSTOM_VIEW_REJECT_REASON_EMPTY_NAME)) {
                sb.append("The view name cannot be blank.");
            } else if(rejectReason.equals(HtmlConstants.CUSTOM_VIEW_REJECT_REASON_NO_DATASETS)) {
                sb.append("You must select at least one dataset for the view.");
            }
            sb.append("</div>").append("\n");
        }

        sb.append("<form method=\"post\" autocomplete=\"off\" name=\"viewBuilder\" ");
        sb.append("action=");
        sb.append("\"");
        sb.append("?").append(HtmlConstants.PARAM_CUSTOM_VIEW_MODE);
        sb.append("=").append(mode == CustomViewMode.ADD ? HtmlConstants.CUSTOM_VIEW_MODE_ADD : HtmlConstants.CUSTOM_VIEW_MODE_EDIT);
        sb.append("\">");
        sb.append("<table width=\"100%\">");

        sb.append(AbstractHtmlGenerator.appendCrumbInformation());

        sb.append(buildTextNameField(HtmlConstants.PARAM_CUSTOM_VIEW_FIELD_NAME, "Name: ", name, 600));
        sb.append(buildTextSearchField(HtmlConstants.PARAM_CUSTOM_VIEW_FIELD_SEARCH_TERM, "Search: ", searchTerm, searchType, 600));
        sb.append("</table>");

        if(availableJsonArray.size() > 0 || selectedJsonArray.size() > 0) {
            sb.append("<table width=\"100%\">");
            List<String> availableDatasets = new ArrayList<>();
            for(int i = 0; i < availableJsonArray.size(); i++) {
                if(!selectedJsonArray.contains(availableJsonArray.get(i))) {
                    String nextAvailableDataset = availableJsonArray.get(i).getAsString();
                    availableDatasets.add(nextAvailableDataset);
                }
            }
            sb.append("<tr>");
            sb.append(buildDatasetListSection(CommonConstants.AVAILABLE, availableDatasets));
     
            List<String> selectedDatasets = new ArrayList<>();
            for(int i = 0; i < selectedJsonArray.size(); i++) {
                selectedDatasets.add(selectedJsonArray.get(i).getAsString());
            }
            sb.append(buildDatasetListSection(CommonConstants.SELECTED, selectedDatasets));
            sb.append("</tr>");
            sb.append("</table>");
        }

        sb.append("<table width=\"100%\">");
        sb.append("<input name=\"").append(HtmlConstants.CUSTOM_VIEW_BUILDER_ACTION_SAVE).append("\"");
        sb.append("type=\"submit\" value=\"").append(HtmlConstants.CUSTOM_VIEW_BUILDER_ACTION_DISPLAY_SAVE).append("\"");
        sb.append("class=\"submit-button\" />");
        sb.append("</table>");

        sb.append("</form>");

        sb.append("</td>");
        sb.append("</tr>");
        sb.append("</table>");
        sb.append("</div>");

        return sb.toString();
    }

    /**
     * Build the HTML for the form that asks the user if they really want to delete a view.
     * 
     * @param viewToDeleteName The name of the View object that will be deleted.
     * @return The generated HTML as a String.
     */
    public static String buildDeleteAskForm(String viewToDeleteName) {
        StringBuilder sb = new StringBuilder();
        sb.append("<div class=\"pane-frame\">\n");
        sb.append("<table id=\"graphSettings\" class=\"pane\" style=\"margin-top:0; border-top:none\">\n");

        sb.append("<tr style=\"border-top:none; white-space: normal\"><td>\n");
        sb.append("<h2 style=\"padding-top:20px;padding-left:20px;\">Delete View</h2>");
        sb.append("</td></tr>\n");
        
        sb.append("<tr><td style=\"padding-left:25px;\">\n");
        sb.append("Are you sure you want to delete " + viewToDeleteName + "?  This is not reversible.<br>");
        sb.append("</td></tr>\n");

        sb.append("<tr><td style=\"padding-left:25px;\">\n");
        sb.append("<form method=\"post\" action=");
        sb.append("\"");
        sb.append("?").append(HtmlConstants.PARAM_CUSTOM_VIEW_MODE);
        sb.append("=").append(HtmlConstants.CUSTOM_VIEW_MODE_DELETE);
        sb.append("\">");
        sb.append("<button type=\"submit\" class=\"submit-button primary\">Yes</button>");
        sb.append("</form>");
        sb.append("</td></tr>");

        sb.append("</table>");
        sb.append("</div>");

        return sb.toString();
    }

    /**
     * Builds the HTML for the individual graph divs represented by the user-created custom views.
     * 
     * @param customViewDivs The Collection of {@link DivModel}s to display.
     * @param context The {@link CustomViewConfigContext} model.
     * @return The generated HTML as a String.
     */
    public static String buildGraphs(Collection<DivModel> customViewDivs, CustomViewConfigContext context) {

        int graphWidth = context.getGraphWidth();
        int graphHeight = context.getGraphHeight();
        int graphsPerRow = context.getGraphsPerRow();

        StringBuilder sb = new StringBuilder();
        sb.append(HtmlConstants.TITLE_STYLE);
        sb.append(HtmlConstants.TABLE_STYLE);
        sb.append("</p><tbody><tr>");

        // Then, we use those tuples we made to actually generate html.
        List<DivModel> divs = new ArrayList<>();
        divs.addAll(customViewDivs);
        divs.add(new AddButtonDivModel());
        int index = 0;
        for(DivModel div : divs) {
            sb.append(div.toDiv(graphWidth, graphHeight));
            if ((index + 1) % graphsPerRow == 0) {
                sb.append("</tr>\n<tr>");
            }
            index++;
        }
        sb.append("</tr></tbody></table>");

        return sb.toString();
    }

    /////////////
    // PRIVATE //
    /////////////

    /**
     * Build the HTML segment for displaying lists of datasets.  This is used for both available
     * and selected datasets.
     * 
     * @param searchResultsListType The list type (CommonConstants.SELECTED or CommonConstants.AVAILABLE).
     * @param displayList The List of String elements to display.
     * @return The generated HTML as a String.
     */
    private static String buildDatasetListSection(String searchResultsListType, List<String> displayList) {
        String header = "";
        String tableId = "";
        String submitName = "";
        String submitValue = "";
        if(searchResultsListType.equals(CommonConstants.SELECTED)) {
            header = "Selected Datasets";
            tableId = "selectedTable";
            submitName = HtmlConstants.CUSTOM_VIEW_BUILDER_ACTION_REMOVE_SELECTED;
            submitValue = HtmlConstants.CUSTOM_VIEW_BUILDER_ACTION_DISPLAY_REMOVE_SELECTED;
        } else if(searchResultsListType.equals(CommonConstants.AVAILABLE)) {
            header = "Available Datasets";
            tableId = "availableTable";
            submitName = HtmlConstants.CUSTOM_VIEW_BUILDER_ACTION_MOVE_AVAILABLE;
            submitValue = HtmlConstants.CUSTOM_VIEW_BUILDER_ACTION_DISPLAY_MOVE_AVAILABLE;
        }

        StringBuilder sb = new StringBuilder();
        sb.append("<td>");
        sb.append("<div class=\"pane-frame\">\n");
        sb.append("<table id=\"").append(tableId).append("\" class=\"pane\" style=\"margin-top:0; border-top:none\">\n");
        sb.append("<tr style=\"border-top:none; white-space: normal\">\n");
        sb.append("<td colspan=\"3\">\n");
        sb.append("<h2 style=\"padding-top:20px;padding-left:20px;\">").append(header).append("</h2>\n");
        sb.append("</td></tr>\n");
        
        sb.append("<tr><td>");
        sb.append("<div style=\"height:600px;width:400px;border:1px solid #ccc;overflow:auto;\">\n");
        sb.append("<table id=\"").append(tableId).append("_inner\">\n");
        for(String searchResult : displayList) {
            sb.append(buildSearchResultCheckboxField(searchResult, searchResult, searchResultsListType.equals(CommonConstants.AVAILABLE)));
        }
        sb.append("</table>");
        sb.append("</div>");
        sb.append("</tr></td>");
        
        sb.append("<tr>");
        sb.append("<td colspan=\"3\">");
        sb.append("<input name=\"").append(submitName).append("\"");
        sb.append("type=\"submit\" value=\"").append(submitValue).append("\"");
        sb.append("class=\"submit-button\" />");
        sb.append("</td>");
        sb.append("</tr>");
        sb.append("</table>");
        sb.append("</div>");
        sb.append("</td>");

        return sb.toString();
    }

    /**
     * Build the HTML segment for the name entry field.
     * 
     * @param textName The name of the text field (not to be confused with the content of the text field itself).
     * @param textDisplay The text to display in the field.
     * @param defaultValue The default value for the text field.
     * @param width The width in pixels of the text field.
     * @return The generated HTML as a String.
     */
    private static String buildTextNameField(String textName, String textDisplay, String defaultValue, int width) {
        StringBuilder sb = new StringBuilder();
        sb.append("<tr>\n");
        sb.append("<td class=\"setting-leftspace\"></td>\n");
        sb.append("<td class=\"setting-name\" style=\"vertical-align:middle;\">").append(textDisplay).append("</td>\n");
        sb.append("<td class=\"setting-main\">");
        sb.append("<input class=\"setting-input\" name=\"").append(textName).append("\" ");
        sb.append("value=\"").append(defaultValue).append("\"");
        sb.append("type=\"text\" style=\"width: ").append(width).append("px;\"").append(">");
        sb.append("</td>");

        sb.append("<td/>"); // We need an extra cell to account for the options dropdown in this column of the table
                            // (see buildTextSearchField() below).
        sb.append("<td/>"); // We need an extra cell to account for the "Search button" in this column of the table
                            // (see buildTextSearchField() below).
        sb.append("<td class=\"setting-help\">");
        sb.append("<a helpURL=\"/descriptor/gov.sandia.sems.jenkins.semsjppplugin.PerformanceRecorder/help/");
        sb.append(textName);
        sb.append("\" href=\"#\" class=\"help-button\">");
        sb.append("<img src=\"/static/4b908ff1/images/16x16/help.png\" alt=\"Help for feature: ");
        sb.append(textDisplay);
        sb.append("\" style=\"width: 16px; height: 16px; \" class=\"icon-help icon-sm\" />");
        sb.append("</a>");
        sb.append("</td>");
        sb.append("</tr>");
        sb.append("<tr class=\"help-area\">");
        sb.append("<td/>");
        sb.append("<td colspan=\"5\">");
        sb.append("<div class=\"help\">Loading...</div>");
        sb.append("</td>");
        sb.append("<td/>");
        sb.append("</tr>");

        return sb.toString();
    }

    /**
     * Build the HTML segment for the search term entry field.
     * 
     * @param textName The name of the text field.
     * @param textDisplay The text to display in the field.
     * @param defaultValue The default value for the text field.
     * @param width The width in pixels of the text field.
     * @return The generated HTML as a String.
     */
    private static String buildTextSearchField(
            String textName, String textDisplay, String defaultValue, String defaultSearchTypeValue, int width) {
        StringBuilder sb = new StringBuilder();
        sb.append("<tr>\n");
        sb.append("<td class=\"setting-leftspace\"></td>\n");
        sb.append("<td class=\"setting-name\" style=\"vertical-align:middle;\">").append(textDisplay).append("</td>\n");

        sb.append("<td class=\"setting-main\">");
        sb.append("<input class=\"setting-input\" name=\"").append(textName).append("\" ");
        sb.append("value=\"").append(defaultValue).append("\"");
        sb.append("type=\"text\" style=\"width: ").append(width).append("px;\"");
        sb.append(">");
        sb.append("</td>");

        sb.append("<td>");
        sb.append("<select class=\"setting-input dropdownList\" name =\"searchStyle\" style=\"width:300px;\">");
        sb.append("<option value=\"").append(HtmlConstants.CUSTOM_VIEW_SEARCH_BY_NAME_VALUE).append("\" ");
        if(defaultSearchTypeValue.equals(HtmlConstants.CUSTOM_VIEW_SEARCH_BY_NAME_VALUE)) {
            sb.append("selected");
        }
        sb.append(" >").append(HtmlConstants.CUSTOM_VIEW_SEARCH_BY_NAME_DISPLAY).append("</option>");
        sb.append("<option value=\"").append(HtmlConstants.CUSTOM_VIEW_SEARCH_BY_PATH_VALUE).append("\" ");
        if(defaultSearchTypeValue.equals(HtmlConstants.CUSTOM_VIEW_SEARCH_BY_PATH_VALUE)) {
            sb.append("selected");
        }
        sb.append(" >").append(HtmlConstants.CUSTOM_VIEW_SEARCH_BY_PATH_DISPLAY).append("</option>");
        sb.append("</select>");
        sb.append("</td>");

        sb.append("<td class=\"setting-leftspace\">");
        sb.append("<input type=\"submit\"");
        sb.append("name=\"").append(HtmlConstants.CUSTOM_VIEW_BUILDER_ACTION_SEARCH).append("\"");
        sb.append("value=\"").append(HtmlConstants.CUSTOM_VIEW_BUILDER_ACTION_DISPLAY_SEARCH).append("\"");
        sb.append("class=\"submit-button\" />");
        sb.append("</td>");

        sb.append("<td class=\"setting-help\">");
        sb.append("<a helpURL=\"/descriptor/gov.sandia.sems.jenkins.semsjppplugin.PerformanceRecorder/help/");
        sb.append(textName);
        sb.append("\" href=\"#\" class=\"help-button\">");
        sb.append("<img src=\"/static/4b908ff1/images/16x16/help.png\" alt=\"Help for feature: ");
        sb.append(textDisplay);
        sb.append("\" style=\"width: 16px; height: 16px; \" class=\"icon-help icon-sm\" />");
        sb.append("</a>");
        sb.append("</td>");
        sb.append("</tr>");
        
        sb.append("<tr class=\"help-area\">");
        sb.append("<td/>");
        sb.append("<td colspan=\"5\">");
        sb.append("<div class=\"help\">Loading...</div>");
        sb.append("</td>");
        sb.append("<td/>");
        sb.append("</tr>");

        return sb.toString();
    }

    /**
     * Builds the individual checkbox control for a given dataset.
     * 
     * @param checkboxName The unique HTML element name for the checkbox.
     * @param checkboxDisplay The display string to show to the right of the checkbox.
     * @param availableDataset If true, prefix the element name with a prefix String to identify it as an available dataset.  Otherwise,
     * prefix it with a prefix String to identify it as a selected dataset.
     * @return The generated HTML as a String.
     */
    private static String buildSearchResultCheckboxField(String checkboxName, String checkboxDisplay, boolean availableDataset) {
        StringBuilder sb = new StringBuilder();
        sb.append("<tr>\n");
        sb.append("<td class=\"setting-leftspace\"></td>\n");
        
        sb.append("<td>");
        sb.append("<input class=\"setting-input\" name=\"");
        if(availableDataset) {
            sb.append(HtmlConstants.PARAM_CUSTOM_VIEW_AVAILABLE_PREFIX);
        } else {
            sb.append(HtmlConstants.PARAM_CUSTOM_VIEW_SELECTED_PREFIX);
        }
        sb.append(HtmlConstants.PARAM_MUSTACHIO);
        sb.append(checkboxName).append("\" ");
        sb.append("value=\"true\" ");
        sb.append("type=\"checkbox\" style=\"width: 10px;\" >");
        sb.append("</td>");

        sb.append("<td class=\"setting-main\" style=\"vertical-align:middle;\">").append(checkboxDisplay).append("</td>\n");

        sb.append("</tr>");
        return sb.toString();
    }
}